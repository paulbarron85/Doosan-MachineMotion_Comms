TCP_IP = "192.168.127.120"
TCP_PORT = 9999
BUFFER_SIZE = 1024

OUTPUT_RESET = 7
RANGE_EXT_POS1 = 500
RANGE_EXT_POS2 = 1000

#The function checks the return value of the client_socket_read() command.
#A negative value is returned if the connection to the server is terminated or there is a communication problem.
#The function reconnect() is called to attempt a reconnection if a negative value is returned.
#Note that the opened socket is closed when a reconnection is attempted.
def fn_reconnect():
    global sock
    #global TCP_IP
    #global TCP_PORT
    client_socket_close(sock)
    sock = client_socket_open("192.168.137.200", 20002)
    sock = client_socket_open(TCP_IP, TCP_PORT)
    return

def th_monitor_connection():
    while True:
        res, rx_data = client_socket_read(g_sock)
        if res < 0:
            fn_reconnect()
        #else:
        #    tp_popup("res={0}, rx_data ={1}".format(res, rx_data), DR_PM_MESSAGE)
        wait(0.2)

def sendCmd(cmd, tp_popup):
    global sock
    client_socket_write(sock, cmd.encode(("utf-8")))
    res, rx_data = client_socket_read(sock)
    result = rx_data.decode("utf-8")
    if tp_popup:
        tp_popup("Send: {0}, Reveived: {1}".format(set_speed, result))
    return result
            
def waitForMotionComplete():
    while True:
        #wait(0.1)
        '''
        client_socket_write(sock, motionComplete.encode(("utf-8")))
        res, rx_data = client_socket_read(sock)
        result = rx_data.decode("utf-8")
        #tp_popup("Send: {0}, Reveived: {1}".format(motionComplete.encode(("utf-8")), result))
        '''
        response = sendCmd(motionComplete, False)
        if(response == "MachineMotion isMotionCompleted = true"):
            break
        elif(response == "isMotionCompleted = false"):
            pass
            
def checkRangeExtPos(desiredPos):
    '''
    client_socket_write(sock, get_pos.encode(("utf-8")))
    res, rx_data = client_socket_read(sock)
    result = rx_data.decode("utf-8")
    '''
    response = sendCmd(get_pos, False)
    if(response == desiredPos):
        return True
    else:
        return False

def checkRangeExtenderStatus():
    response = sendCmd(estop_status, False)
    if(response == 'True'):
        return True
    elif(response == 'False':
        return False
          
        
def reset_range_extender():
    # Reset Vention Controller and power to contactor
    global OUTPUT_RESET
    set_digital_output(OUTPUT_RESET, ON)
    wait(0.1)
    set_digital_output(OUTPUT_RESET, OFF)
    wait(0.5)

def homeRangeExtender():
    movej(home_pos_joint)
    homing_sock = client_socket_open(TCP_IP, 1234)
    home_command = "Home"
    client_socket_write(homing_sock, home_command.encode(("utf-8")))
    res, rx_data = client_socket_read(sock)
    result = rx_data.decode("utf-8")
    client_socket_close(homing_sock)
    if result == "HomeDone":
        return True
    else:
        return False
    
motionComplete = 'isMotionCompleted;'
moveAxis_negative = 'SET im_move_abs_1/500/;'
moveAxis_positive = 'SET im_move_abs_1/1000/;'

enclosed_timing_belt_mm_turn = 208
gearbox_ratio = 5
mech_gain = enclosed_timing_belt_mm_turn / gearbox_ratio
#m.configServo(axis, MECH_GAIN.enclosed_timing_belt_mm_turn / 5, DIRECTION.POSITIVE, 10.0)
set_micro_step = 'SET de_axis_1_microsteps_config/8/;'
set_mech_gain = 'SET de_axis_1_mechanical_gain_config/' + str(mech_gain) + '/;'
set_direction = 'SET de_axis_1_direction_config/1/;'
set_axis_config = 'de_axis_1_config_exec;'

speed_mm_sec = 700
speed_mm_m = speed_mm_sec*60
set_speed = 'SET speed/'+str(speed_mm_m) + '/;'
acc_mm_sec = 700
acc_mm_m = acc_mm_sec*60
set_acc = 'SET acceleration/'+str(acc_mm_m) + '/;'

estop_release = 'estop/release/request'
estop_reset = 'estop/systemreset/request'
estop_status = 'estop/status;'

home_axis = 'im_home_axis_1;'
get_pos = 'GET im_get_controller_pos_axis_1;'


# Connect to Vention MachineMotion Range Extender
sock = client_socket_open(TCP_IP, TCP_PORT)
res, rx_data = client_socket_read(sock)
result = rx_data.decode("utf-8")
tp_popup("Sent: {0}, Received: {1}".format("connecting....", result))

# Start thread to monitor connection and reconnect if it drops out
g_th_id1 = thread_run(th_monitor_connection, loop=True)

reset_range_extender()    

# Configure Range Extender
sendCmd(set_speed, True)
'''
client_socket_write(sock, set_speed.encode(("utf-8")))
res, rx_data = client_socket_read(sock)
result = rx_data.decode("utf-8")
tp_popup("Send: {0}, Reveived: {1}".format(set_speed, result))
'''

sendCmd(set_acc, True)
'''
client_socket_write(sock, set_acc.encode(("utf-8")))
res, rx_data = client_socket_read(sock)
result = rx_data.decode("utf-8")
tp_popup("Send: {0}, Reveived: {1}".format(set_acc, result))
'''

sendCmd(set_micro_step, True)
'''
client_socket_write(sock, set_micro_step.encode(("utf-8")))
res, rx_data = client_socket_read(sock)
result = rx_data.decode("utf-8")
tp_popup("Send: {0}, Reveived: {1}".format(set_micro_step, result))
'''

sendCmd(set_mech_gain, True)
'''
client_socket_write(sock, set_mech_gain.encode(("utf-8")))
res, rx_data = client_socket_read(sock)
result = rx_data.decode("utf-8")
tp_popup("Send: {0}, Reveived: {1}".format(set_mech_gain, result))
'''

sendCmd(set_direction, True)
'''
client_socket_write(sock, set_direction.encode(("utf-8")))
res, rx_data = client_socket_read(sock)
result = rx_data.decode("utf-8")
tp_popup("Send: {0}, Reveived: {1}".format(set_direction, result))
'''

sendCmd(set_axis_config, True)
'''
client_socket_write(sock, set_axis_config.encode(("utf-8")))
res, rx_data = client_socket_read(sock)
result = rx_data.decode("utf-8")
tp_popup("Send: {0}, Reveived: {1}".format(set_axis_config, result))
'''

#client_socket_write(sock, estop_release.encode(("utf-8")))
#res, rx_data = client_socket_read(sock)
#result = rx_data.decode("utf-8")
#tp_popup("Send: {0}, Reveived: {1}".format(estop_release, result))

#client_socket_write(sock, estop_reset.encode(("utf-8")))
#res, rx_data = client_socket_read(sock)
#result = rx_data.decode("utf-8")
#tp_popup("Send: {0}, Reveived: {1}".format(estop_reset, result))


client_socket_write(sock, set_speed.encode(("utf-8")))
res, rx_data = client_socket_read(sock)
result = rx_data.decode("utf-8")
tp_popup("Send: {0}, Reveived: {1}".format(set_speed, result))

homeRangeExtender()
#sendCmd(home_axis, False)
'''
client_socket_write(sock, home_axis.encode(("utf-8")))
res, rx_data = client_socket_read(sock)
result = rx_data.decode("utf-8")
#tp_popup("Send: {0}, Reveived: {1}".format(home_axis, result))
'''

waitForMotionComplete()

while True:

    sendCmd(moveAxis_positive, False)
    '''
    client_socket_write(sock, moveAxis_positive.encode("utf-8"))
    res, rx_data = client_socket_read(sock)
    result = rx_data.decode("utf-8")
    #tp_popup("Send: {0}, Reveived: {1}".format(moveAxis_positive, result))
    '''
    
    while not checkRangeExtPos(RANGE_EXT_POS1):
        if checkRangeExtenderStatus():
            reset_range_extender()
        elif:
            setRangeExtPos(RANGE_EXT_POS1)

    #checkRangeExtPos(RANGE_EXT_POS1)
    #waitForMotionComplete()

    sendCmd(moveAxis_negative, False)
    '''
    client_socket_write(sock, moveAxis_negative.encode("utf-8"))
    res, rx_data = client_socket_read(sock)
    result = rx_data.decode("utf-8")
    #tp_popup("Send: {0}, Reveived: {1}".format(moveAxis_negative, result))
    '''

    while not checkRangeExtPos(RANGE_EXT_POS2):
        if checkRangeExtenderStatus():
            reset_range_extender()
        elif:
            setRangeExtPos(RANGE_EXT_POS2)
    
    #checkRangeExtPos(RANGE_EXT_POS2)
    #waitForMotionComplete()